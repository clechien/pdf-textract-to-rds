Transform: AWS::Serverless-2016-10-31
Description: SAM Textract Lambda stack
Parameters:
  DemoUser:
    Description: The demo user name to connect to Postgres.
    Type: String
  TableName:
    Description: The RDS Postgres table name.
    Type: String
Resources:
  UploadBucket:
    Type: AWS::S3::Bucket
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: LambdaSNSTopic
      TopicName: LambdaSNSTopic
  ReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: index.lambda_handler
      CodeUri: s3://demo-lvthillo-bucket/06db891946408f766b808a97ec7796da
      Role:
        Fn::GetAtt:
        - ReadLambdaExecutionRole
        - Arn
      Events:
        InvoiceUploadEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: UploadBucket
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          SNSROLEARN:
            Fn::GetAtt:
            - SNSRole
            - Arn
          SNSTOPIC:
            Ref: SNSTopic
  WriteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: index.lambda_handler
      Layers:
      - Ref: WriteFunctionDepLayer
      CodeUri: s3://demo-lvthillo-bucket/b690ee3383225871598ab2931b8e19d2
      Role:
        Fn::GetAtt:
        - WriteLambdaExecutionRole
        - Arn
      Environment:
        Variables:
          DBEndPoint:
            Fn::ImportValue: DBEndpointAddress
          DatabaseName:
            Fn::ImportValue: DBName
          DBUserName:
            Ref: DemoUser
          TableName:
            Ref: TableName
  WriteFunctionDepLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: write-function-app-dependencies
      Description: Dependencies for sam app
      ContentUri: s3://demo-lvthillo-bucket/f8d71581c08eea0f9b3585a30bf804b8
      CompatibleRuntimes:
      - python3.7
      LicenseInfo: MIT
      RetentionPolicy: Retain
  Subscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
        - WriteFunction
        - Arn
      Protocol: lambda
      TopicArn:
        Ref: SNSTopic
  InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: WriteFunction
      Principal: sns.amazonaws.com
  SNSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - textract.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: sns-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sns:publish
            Resource:
              Ref: SNSTopic
  ReadLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cloudwatch-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: textract-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - textract:*
            Resource: '*'
      - PolicyName: s3-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: '*'
  WriteLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cloudwatch-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: textract-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - textract:*
            Resource: '*'
      - PolicyName: rds-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - rds-db:connect
            Resource:
              Fn::Sub: arn:aws:rds-db:eu-west-1:${AWS::AccountId}:dbuser:*/${DemoUser}
